name: Check File
description: 'Check file - Add filename to check for errors or text Word to search for within build files'
inputs:
  filename:
    description: 'Check for filename by extension Or Check for text by word match in files'
    type: string
    required: true
    default: ''
  dirname:
    description: 'Your project root folder if created'
    type: string
    required: false
    default: '*'
  rootdir:
    description: 'File search will start from root / if true'
    type: boolean
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: Installing dependencies
      if: inputs.filename != ''
      run: |
        if [[ ! `which remake` ]] || [[ ! `which cppcheck` ]] || [[ ! `which shellcheck` ]]; then
          sudo DEBIAN_FRONTEND=noninteractive apt-get -yq install remake cppcheck cppcheck-gui shellcheck >/dev/null && echo "###### dependencies Installed ######";
        fi
      shell: bash
      continue-on-error: false

    - name: Directory Check
      if: inputs.filename != ''
      run: |
        if ${{ inputs.rootdir }}; then
           echo -e "\n######\n NOTE: Search will begin from root directory (/)\n######\n";
           echo "FILE_PATH=/" >> ${GITHUB_ENV};
        else
           echo -e "\n######\n NOTE: Search will begin from ${GITHUB_WORKSPACE} \n######\n";
           echo "FILE_PATH=${GITHUB_WORKSPACE}" >> ${GITHUB_ENV};
        fi
      shell: bash
      continue-on-error: false

    - name: Check Filename (root mode)
      if: inputs.rootdir == 'true' && inputs.filename != ''
      run: |
        echo -e "\n\n######\n Searching from root directory for ${{ inputs.filename }} matches \n######\n\n";
        export GIT_DISCOVERY_ACROSS_FILESYSTEM=1
        files=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "${{ inputs.filename }}" -print);
        file_type=$(echo ${{ inputs.filename }} | sed 's/.*\.\([^.]*\)$/\1/');
        file_count=1
        include_count=1
        makefile_count=1
        shellcheck_count=1
        if [[ ${file_type} = 'h' ]] || [[ ${file_type} = 'c' ]] || [[ ${file_type} = 'cpp' ]] && [[ -n ${files} ]]; then
            echo -e "\nFound File Path(s): \n${files}\n";
            for f in ${files[@]}; do
              count1=$((file_count++));
              echo -e "\n######\n FILE PATH ($count1) \n######\n";
              sudo find $(dirname ${f}) -type f -name $(basename ${f}) -print;
              echo -e "\n######\n FILE CONTENT ($count1) \n######\n";
              sudo find $(dirname ${f}) -type f -name $(basename ${f}) -exec cat {} \; 
              echo -e "\n\n######\n CPPCHECK ERROR ANALYZER ($count1) \n######\n";
              cppcheck --verbose --force --enable=all --suppress=missingIncludeSystem --std=c++11 --report-progress --quiet ${f}
              includes=$(sudo find $(dirname ${f}) -name $(basename ${f}) -exec sed -n 's/^#include <\(.*\)>/\1/p; s/^#include "\(.*\)"/\1/p' {} \;)      
              if [[ -n ${includes} ]]; then
                echo -e "\nFound Include Path(s): \n${includes}\n";
                for i in ${includes[@]}; do
                  count2=$((include_count++));
                  header=$(sudo find $(echo $(dirname ${f}) | cut -d/ -f1-8) -type f -path "*/$(dirname ${i})*" -name "$(basename ${i})" -print -quit) 2>/dev/null;
                  if [[ -f ${header} ]]; then
                    echo -e "\n######\n CPPCHECK HEADER FILE ($count2) \n######\n${i}\n";
                    cppcheck --verbose --force --enable=all --std=c++11 --report-progress --suppress=missingIncludeSystem ${header} ${f}
                  else
                    echo -e "\n######\n CPPCHECK ANALYZED ($(expr $count2 - 1)) HEADER FILE(S) \n######\n";
                    break;
                  fi;
                done;
              fi;
              done;
          echo -e "Total number of ${{ inputs.filename }} file(s) checked is: $count1\n";
          echo -e "Total number of include file(s) checked is: $count2\n";
          echo -e "Scanning Completed!\nCppcheck Exiting!\n .....\n";
        elif [[ ${file_type} = 'sh' ]] && [[ -n ${files} ]]; then
          for f in ${files[@]}; do
            count3=$((shellcheck_count++));
            shellcheck=$(sudo find $(echo $(dirname ${f}) | cut -d/ -f1-8) -type f -path "*/$(dirname ${f})*" -name "$(basename ${i})" -print -quit) 2>/dev/null;
            echo -e "\n\n######\n SHELLCHECK ERROR ANALYZER ($count3) \n######\n";
            for s in ${shellcheck[@]}; do
              echo -e "\n\n######\n ANALYZING FOR ERROR(S) ($count3) \n######\n";
              shellcheck --norc --severity=error --external-sources --check-sourced ${f} ${s};
            done;
          done;
          echo -e "Total number of ${{ inputs.filename }} file(s) checked is: $count3\n";
          echo -e "Total number of include file(s) checked is: $count3\n";
          echo -e "Scanning Completed!\nShellcheck Exiting!\n .....\n";
        elif [[ ${file_type} = 'Makefile' ]] || [[ ${file_type} = 'makefile' ]] || [[ ${file_type} = 'mk' ]] && [[ -n ${files} ]]; then
          for f in ${files[@]}; do
            count4=$((makefile_count++));
            makefile=$(sudo find $(echo $(dirname ${f}) | cut -d/ -f1-8) -type f -path "*/$(dirname ${f})*" -name "$(basename ${i})" -print -quit) 2>/dev/null;
            echo -e "\n\n######\n REMAKE ERROR ANALYZER ($count4) \n######\n";
            for m in ${makefile[@]}; do
              echo -e "\n\n######\n ANALYZING FOR ERROR(S) ($count4) \n######\n";
              remake -n -v --debug --keep-going -I $(dirname ${m}) ${f};
            done;
          done;
          echo -e "Total number of ${{ inputs.filename }} file(s) checked is: $count4\n";
          echo -e "Total number of include file(s) checked is: $count4\n";
          echo -e "Scanning Completed!\nRemake Exiting!\n .....\n";
        elif [[ -n ${files} ]]; then
            for f in ${files[@]}; do
              count5=$((file_count++));
              echo -e "\n######\n FILE PATH ($count5) \n######\n";
              sudo find $(dirname ${f}) -type f -name $(basename ${f}) -print;
              echo -e "\n######\n FILE CONTENT ($count5) \n######\n";
              sudo find $(dirname ${f}) -type f -name $(basename ${f}) -exec cat {} \;
            done;
            echo -e "Total number of ${{ inputs.filename }} file(s) checked is: $count5\n";
            echo -e "Scanning Completed!\nCheckfile Exiting!\n .....\n";
        elif [[ ${file_type} == ${{ inputs.filename }} ]]; then
          finder=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.c" -exec grep -H "${{ inputs.filename }}" {} \;)
          if [[ -n ${finder} ]]; then
            counter1=$( echo -e "${finder}" | grep -c "$" );
            echo -e "\n######\n ($counter1) CONTENT MATCH(S) FOUND IN C FILES \n######\n";
            echo -e "\n${finder}\n";
          else
            echo -e "\n######\n NOTHING FOUND IN C FILES \n######\n";
          fi;
          finder=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.h" -exec grep -H "${{ inputs.filename }}" {} \;)
          if [[ -n ${finder} ]]; then
            counter2=$( echo -e "${finder}" | grep -c "$" );
            echo -e "\n######\n ($counter2) CONTENT MATCH(S) FOUND IN HEADER FILES \n######\n";
            echo -e "\n${finder}\n";
          else
            echo -e "\n######\n NOTHING FOUND IN HEADER FILES \n######\n";
          fi;
          finder=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.cpp" -exec grep -H "${{ inputs.filename }}" {} \;)
          if [[ -n ${finder} ]]; then
            counter3=$( echo -e "${finder}" | grep -c "$" );
            echo -e "\n######\n ($counter3) CONTENT MATCH(S) FOUND IN C++ FILES \n######\n";
            echo -e "\n${finder}\n";
          else
            echo -e "\n######\n NOTHING FOUND IN C++ FILES \n######\n";
          fi;
          finder=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.sh" -exec grep -H "${{ inputs.filename }}" {} \;)
          if [[ -n ${finder} ]]; then
            counter4=$( echo -e "${finder}" | grep -c "$" );
            echo -e "\n######\n ($counter4) CONTENT MATCH(S) FOUND IN SHELL FILES \n######\n";
            echo -e "\n${finder}\n";
          else
            echo -e "\n######\n NOTHING FOUND IN SHELL FILES \n######\n";
          fi;
          finder1=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -iname "*.mk" -exec grep -H "${{ inputs.filename }}" {} \;)
          finder2=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -iname "Makefile" -exec grep -H "${{ inputs.filename }}" {} \;)
          if [[ -n ${finder1} ]]; then
            counter5=$( echo -e "${finder1}" | grep -c "$" );
            echo -e "\n######\n ($counter5) CONTENT MATCH(S) FOUND IN MAKE FILES \n######\n";
            echo -e "\n${finder1}\n";
          elif [[ -n ${finder2} ]]; then
            counter6=$( echo -e "${finder2}" | grep -c "$" );
            echo -e "\n######\n ($counter6) CONTENT MATCH(S) FOUND IN MAKE FILES \n######\n";
            echo -e "\n${finder2}\n";
          else
            echo -e "\n######\n NOTHING FOUND IN MAKE FILES \n######\n";
          fi;
          echo -e "\nScanning Completed!\nText Locator Exiting!\n .....\n"        
        else
          echo -e "\n######\n ${{ inputs.filename }} NOT FOUND IN CHECKED FILES \n######\n";
        fi;
      shell: bash
      continue-on-error: true

    - name: Check Filename (user mode)
      if: inputs.rootdir != 'true' && inputs.filename != ''
      run: |
        echo -e "\n\n######\n Searching from github workspace directory for ${{ inputs.filename }} matches \n######\n\n";
        export GIT_DISCOVERY_ACROSS_FILESYSTEM=1
        files=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "${{ inputs.filename }}" -print);
        file_type=$(echo ${{ inputs.filename }} | sed 's/.*\.\([^.]*\)$/\1/');
        file_count=1
        include_count=1
        makefile_count=1
        shellcheck_count=1
        if [[ ${file_type} = 'h' ]] || [[ ${file_type} = 'c' ]] || [[ ${file_type} = 'cpp' ]] && [[ -n ${files} ]]; then
            echo -e "\nFound File Path(s): \n${files}\n";
            for f in ${files[@]}; do
              count1=$((file_count++));
              echo -e "\n######\n FILE PATH ($count1) \n######\n";
              find $(dirname ${f}) -type f -name $(basename ${f}) -print;
              echo -e "\n######\n FILE CONTENT ($count1) \n######\n";
              find $(dirname ${f}) -type f -name $(basename ${f}) -exec cat {} \; 
              echo -e "\n\n######\n CPPCHECK ERROR ANALYZER ($count1) \n######\n";
              cppcheck --verbose --force --enable=all --suppress=missingIncludeSystem --std=c++11 --report-progress --quiet ${f}
              includes=$(find $(dirname ${f}) -name $(basename ${f}) -exec sed -n 's/^#include <\(.*\)>/\1/p; s/^#include "\(.*\)"/\1/p' {} \;)      
              if [[ -n ${includes} ]]; then
                echo -e "\nFound Include Path(s): \n${includes}\n";
                for i in ${includes[@]}; do
                  count2=$((include_count++));
                  header=$(find $(echo $(dirname ${f}) | cut -d/ -f1-8) -type f -path "*/$(dirname ${i})*" -name "$(basename ${i})" -o -name "$(basename ${i})" -print -quit) 2>/dev/null;
                  if [[ -f ${header} ]]; then
                    echo -e "\n######\n CPPCHECK HEADER FILE ($count2) \n######\n${i}\n";
                    cppcheck --verbose --force --enable=all --std=c++11 --report-progress --suppress=missingIncludeSystem ${header} ${f}
                  else
                    echo -e "\n######\n CPPCHECK ANALYZED ($(expr $count2 - 1)) HEADER FILE(S) \n######\n";
                    break;
                  fi;
                done;
              fi;
              done;
          echo -e "Total number of ${{ inputs.filename }} file(s) checked is: $count1\n";
          echo -e "Total number of include file(s) checked is: $count2\n";
          echo -e "Scanning Completed!\nCppcheck Exiting!\n .....\n";
        elif [[ ${file_type} = 'sh' ]] && [[ -n ${files} ]]; then
          for f in ${files[@]}; do
            count3=$((shellcheck_count++));
            shellcheck=$(find $(echo $(dirname ${f}) | cut -d/ -f1-8) -type f -path "*/$(dirname ${f})*" -name "$(basename ${i})" -print -quit) 2>/dev/null;
            echo -e "\n\n######\n SHELLCHECK ERROR ANALYZER ($count3) \n######\n";
            for s in ${shellcheck[@]}; do
              echo -e "\n\n######\n ANALYZING FOR ERROR(S) ($count3) \n######\n";
              shellcheck --norc --severity=error --external-sources --check-sourced ${f} ${s};
            done;
          done;
          echo -e "Total number of ${{ inputs.filename }} file(s) checked is: $count3\n";
          echo -e "Total number of include file(s) checked is: $count3\n";
          echo -e "Scanning Completed!\nShellcheck Exiting!\n .....\n";
        elif [[ ${file_type} = 'Makefile' ]] || [[ ${file_type} = 'makefile' ]] || [[ ${file_type} = 'mk' ]] && [[ -n ${files} ]]; then
          for f in ${files[@]}; do
            count4=$((makefile_count++));
            makefile=$(find $(echo $(dirname ${f}) | cut -d/ -f1-8) -type f -path "*/$(dirname ${f})*" -name "$(basename ${i})" -print -quit) 2>/dev/null;
            echo -e "\n\n######\n REMAKE ERROR ANALYZER ($count4) \n######\n";
            for m in ${makefile[@]}; do
              echo -e "\n\n######\n ANALYZING FOR ERROR(S) ($count4) \n######\n";
              remake -n -v --debug --keep-going -I $(dirname ${m}) ${f};
            done;
          done;
          echo -e "Total number of ${{ inputs.filename }} file(s) checked is: $count4\n";
          echo -e "Total number of include file(s) checked is: $count4\n";
          echo -e "Scanning Completed!\nRemake Exiting!\n .....\n";
        elif [[ -n ${files} ]]; then
            for f in ${files[@]}; do
              count5=$((file_count++));
              echo -e "\n######\n FILE PATH ($count5) \n######\n";
              find $(dirname ${f}) -type f -name $(basename ${f}) -print;
              echo -e "\n######\n FILE CONTENT ($count5) \n######\n";
              find $(dirname ${f}) -type f -name $(basename ${f}) -exec cat {} \;
            done;
            echo -e "Total number of ${{ inputs.filename }} file(s) checked is: $count5\n";
            echo -e "Scanning Completed!\nCheckfile Exiting!\n .....\n";
        elif [[ ${file_type} == ${{ inputs.filename }} ]]; then
          finder=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.c" -exec grep -H "${{ inputs.filename }}" {} \;)
          if [[ -n ${finder} ]]; then
            counter1=$( echo -e "${finder}" | grep -c "$" );
            echo -e "\n######\n ($counter1) CONTENT MATCH(S) FOUND IN C FILES \n######\n";
            echo -e "\n${finder}\n";
          else
            echo -e "\n######\n NOTHING FOUND IN C FILES \n######\n";
          fi;
          finder=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.h" -exec grep -H "${{ inputs.filename }}" {} \;)
          if [[ -n ${finder} ]]; then
            counter2=$( echo -e "${finder}" | grep -c "$" );
            echo -e "\n######\n ($counter2) CONTENT MATCH(S) FOUND IN HEADER FILES \n######\n";
            echo -e "\n${finder}\n";
          else
            echo -e "\n######\n NOTHING FOUND IN HEADER FILES \n######\n";
          fi;
          finder=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.cpp" -exec grep -H "${{ inputs.filename }}" {} \;)
          if [[ -n ${finder} ]]; then
            counter3=$( echo -e "${finder}" | grep -c "$" );
            echo -e "\n######\n ($counter3) CONTENT MATCH(S) FOUND IN C++ FILES \n######\n";
            echo -e "\n${finder}\n";
          else
            echo -e "\n######\n NOTHING FOUND IN C++ FILES \n######\n";
          fi;
          finder=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.sh" -exec grep -H "${{ inputs.filename }}" {} \;)
          if [[ -n ${finder} ]]; then
            counter4=$( echo -e "${finder}" | grep -c "$" );
            echo -e "\n######\n ($counter4) CONTENT MATCH(S) FOUND IN SHELL FILES \n######\n";
            echo -e "\n${finder}\n";
          else
            echo -e "\n######\n NOTHING FOUND IN SHELL FILES \n######\n";
          fi;
          finder=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -iname "*.mk" -exec grep -H "${{ inputs.filename }}" {} \;)
          finder=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -iname "Makefile" -exec grep -H "${{ inputs.filename }}" {} \;)
          if [[ -n ${finder1} ]]; then
            counter5=$( echo -e "${finder1}" | grep -c "$" );
            echo -e "\n######\n ($counter5) CONTENT MATCH(S) FOUND IN MAKE FILES \n######\n";
            echo -e "\n${finder1}\n";
          elif [[ -n ${finder2} ]]; then
            counter6=$( echo -e "${finder2}" | grep -c "$" );
            echo -e "\n######\n ($counter6) CONTENT MATCH(S) FOUND IN MAKE FILES \n######\n";
            echo -e "\n${finder2}\n";
          else
            echo -e "\n######\n NOTHING FOUND IN MAKE FILES \n######\n";
          fi;
          echo -e "\nScanning Completed!\nText Locator Exiting!\n .....\n"        
        else
          echo -e "\n######\n ${{ inputs.filename }} NOT FOUND IN CHECKED FILES \n######\n";
        fi;
      shell: bash
      continue-on-error: true

    - name: Filename Check
      if: inputs.filename == ''
      run: echo 'No input provided variable not set • filename ... Exiting';
      shell: bash
      continue-on-error: true
