name: Check File Action
description: 'Check file - Add filename to check for errors or text Word to search for within workspace files'
inputs:
  filename:
    description: 'Check for filename by extension Or Check for text by word match in files'
    type: string
    required: true
    default: ''
  dirname:
    description: 'Your project root folder if created'
    type: string
    required: false
    default: '*'
  rootdir:
    description: 'Search will start from root (/) if true'
    type: boolean
    required: false
    default: 'false'
  content:
    description: 'Search will list dir contents of found filename if true'
    type: boolean
    required: false
    default: 'false'
  include:
    description: 'Check include files called by C/C++ filename searches if true'
    type: boolean
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: Set up Go 1.25 3
      uses: actions/setup-go@v2 
      with: 
        go-version: 1.25.3

    - name: Installing Dependencies
      if: inputs.filename != ''
      run: |
        echo 
        file_type=$(echo ${{ inputs.filename }} | sed 's/.*\.\([^.]*\)$/\1/');
        file=$(find ${GITHUB_WORKSPACE} -type f -name "checkmake.ini" -print0 -quit)
        path='/home/runner/checkmake.ini';
        if [[ ! `which checkmake` ]] && [[ ${file_type} = 'Makefile' ]] || [[ ${file_type} = 'makefile' ]] || [[ ${file_type} = 'mk' ]]; then
          go install 'github.com/checkmake/checkmake/cmd/checkmake@latest' && echo -e "\n##########\n\tCheckmake dependencies Installed\n##########\n";     
          if [[ -n ${file} ]]; then
            echo -e "\n##########\n\tcheckmake.ini found\n\tcopying....\n##########\n" && sudo cp -v "${file}" "${path}" 2>/dev/null;
          fi;
        elif [[ -n ${file} ]] && [[ ${file_type} = 'Makefile' ]] || [[ ${file_type} = 'makefile' ]] || [[ ${file_type} = 'mk' ]]; then
            sudo cp -vf "${file}" "${path}" 2>/dev/null;
        fi;
        if [[ ! `which cppcheck` ]] && [[ ${file_type} = 'c' ]] || [[ ${file_type} = 'cc' ]] || [[ ${file_type} = 'cpp' ]] || [[ ${file_type} = 'cxx' ]] || [[ ${file_type} = 'h' ]] || [[ ${file_type} = 'hh' ]] || [[ ${file_type} = 'hpp' ]] || [[ ${file_type} = 'hxx' ]]; then
          sudo DEBIAN_FRONTEND=noninteractive apt-get -yq install cppcheck >/dev/null && echo -e "\n##########\n\tCppcheck dependencies Installed\n##########\n";
        fi;
        if [[ ! `which shellcheck` ]] && [[ ${file_type} = 'sh' ]] || [[ ${file_type} = 'SH' ]]; then
          sudo DEBIAN_FRONTEND=noninteractive apt-get -yq install shellcheck >/dev/null && echo -e "\n##########\n\tShellcheck dependencies Installed\n##########\n";
        fi;
      shell: bash
      continue-on-error: true

    - name: Directory Base
      if: inputs.filename != ''
      run: |
        echo 
        if ${{ inputs.rootdir }}; then
           echo -e "\n##########\nNOTE: Search default directory ~/\n##########\n";
           echo "FILE_PATH=/" >> ${GITHUB_ENV};
        else
           echo -e "\n##########\nNOTE: Search default directory ${GITHUB_WORKSPACE}\n##########\n";
           echo "FILE_PATH=${GITHUB_WORKSPACE}" >> ${GITHUB_ENV};
        fi
      shell: bash
      continue-on-error: true

    - name: Check File (user mode)
      if: inputs.rootdir != 'true' && inputs.filename != ''
      run: |
        echo 
        echo -e "\n##########\nSearching from github workspace directory for ${{ inputs.filename }} matches.\n##########\n";
        export GIT_DISCOVERY_ACROSS_FILESYSTEM=1
        files=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "${{ inputs.filename }}" -print);
        file_type=$(echo ${{ inputs.filename }} | sed 's/.*\.\([^.]*\)$/\1/');
        file_count=1
        include_count=1
        makefile_count=1
        shellcheck_count=1
        if [[ ${file_type} = 'c' ]] || [[ ${file_type} = 'cc' ]] || [[ ${file_type} = 'cpp' ]] || [[ ${file_type} = 'cxx' ]] || [[ ${file_type} = 'h' ]] || [[ ${file_type} = 'hh' ]] || [[ ${file_type} = 'hpp' ]] || [[ ${file_type} = 'hxx' ]] && [[ -n ${files} ]]; then
            echo -e "\nFound File Path(s):\n${files}\n";
            for f in ${files[@]}; do
              count1=$((file_count++));
              echo -e "\n##########\n\tFILE PATH ($count1)\n##########\n";
              find $(dirname ${f}) -type f -name $(basename ${f}) -print;
              if ${{ inputs.content }}; then
                echo -e "\n##########\n\tFILE CONTENT ($count1)\n##########\n";
                find $(dirname ${f}) -type f -name $(basename ${f}) -exec cat -n {} \;
              fi;
                echo -e "\n##########\nCPPCHECK ERROR ANALYZER ($count1)\n##########\n";
                cppcheck --verbose --force --enable=all --suppress=missingIncludeSystem --std=c++11 --report-progress ${f}
              if ${{ inputs.include }}; then
                includes=$(find $(dirname ${f}) -name $(basename ${f}) -exec sed -n 's/^#include <\(.*\)>/\1/p; s/^#include "\(.*\)"/\1/p' {} \;)      
                if [[ -n ${includes} ]]; then
                  echo -e "\nFound Include Path(s):\n${includes}\n";
                  for i in ${includes[@]}; do
                    fxpath=$(dirname ${i});
                    if [[ ! -n $fxpath ]]; then
                      fxpath='*/';
                    fi;
                    count2=$((include_count++));
                    header=$(find $(echo $(dirname ${f}) | cut -d/ -f1-8) -type f -path "*/${fxpath}*" -name "$(basename ${i})" -print -quit) 2>/dev/null;
                    if [[ -f ${header} ]]; then
                      echo -e "\n##########\nCPPCHECK HEADER FILE ($count2)\n##########\n${i}\n";
                      cppcheck --verbose --force --enable=all --std=c++11 --report-progress --suppress=missingIncludeSystem --quiet ${header}
                    else
                      echo -e "\n##########\nCPPCHECK HEADER FILE "$(basename ${i}) NOT FOUND\n##########\n";
                    fi;
                  done;
                fi;
              fi;
            done;
          echo -e "\nTotal number of ${{ inputs.filename }} file(s) checked is: $count1\n";
          echo -e "Total number of file(s) checked is: $count2\n";
          echo -e "Scanning Completed!\nCppcheck Exiting!\n .....\n";
        elif [[ ${file_type} = 'sh' ]] || [[ ${file_type} = 'SH' ]] && [[ -n ${files} ]]; then
          for f in ${files[@]}; do
            count3=$((shellcheck_count++));
            content=$(find $(dirname ${f}) -type f -name $(basename ${f}) -exec cat -n {} \;);
            echo -e "\n##########\nSHELLCHECK ANALYZING ( $(basename ${s}) ) FOR ERROR(S) ($count3)\n##########\n";
            shellcheck --norc --severity=error ${f} && echo -e "\n##########\n\tSHELLCHECK NO ERRORS FOUND ( $(basename ${f}) )\n##########\n" || echo 'SHELLCHECK FOUND ERROR(s)';
            if ${{ inputs.content }}; then
              echo -e "\n##########\n\tFILE CONTENT\n##########\n";
              echo -e "\n${content}\n";
            fi;
          done;
          echo -e "\nTotal number of ${{ inputs.filename }} file(s) checked is: $count3\n";
          echo -e "Scanning Completed!\nShellcheck Exiting!\n .....\n";
        elif [[ ${file_type} = 'Makefile' ]] || [[ ${file_type} = 'makefile' ]] || [[ ${file_type} = 'GNUmakefile' ]] || [[ ${file_type} = 'mk' ]] && [[ -n ${files} ]]; then
          for f in ${files[@]}; do
            count4=$((makefile_count++));
            content=$(find $(dirname ${f}) -type f -name $(basename ${f}) -exec cat -n {} \;);
            echo -e "\n##########\nCHECKMAKE ERROR ANALYZING $(basename ${f}) ($count4)\n##########\n";
            checkmake ${f} && echo -e "\n##########\n\tCHECKMAKE ($(basename ${f})) SCAN FOUND NO ERRORS\n##########\n" || if [ $? -eq 1 ]; then echo -e "\nScan Completed With Errors\nCheckmake exit code (1)"; fi;
            if ${{ inputs.content }}; then
              echo -e "\n##########\n\tFILE CONTENT\n##########\n";
              echo -e "\n${content}\n";
            fi;
          done;
          echo -e "\nTotal number of ${{ inputs.filename }} file(s) checked is: $count4\n";
          echo -e "Scanning Completed!\nCheckMake Exiting!\n .....\n";
        elif [[ -n ${files} ]]; then
            for f in ${files[@]}; do
              count5=$((file_count++));
              echo -e "\n##########\n\tFILE PATH ($count5) \n##########\n";
              find $(dirname ${f}) -type f -name $(basename ${f}) -print;
              if ${{ inputs.content }}; then
                echo -e "\n##########\n\tFILE CONTENT ($count5) \n##########\n";
                find $(dirname ${f}) -type f -name $(basename ${f}) -exec cat -n {} \;
              fi;
            done;
            echo -e "\nTotal number of ${{ inputs.filename }} file(s) checked is: $count5\n";
            echo -e "Scanning Completed!\nCheckfile Exiting!\n .....\n";
        elif [[ ${file_type} == ${{ inputs.filename }} ]]; then
          finder=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.c" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          content=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.c" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter1=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter1) CONTENT MATCH(S) FOUND IN C FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\n\tNOTHING FOUND IN C FILES\n##########\n";
          fi;
          finder=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.h" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          content=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.h" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter2=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter2) CONTENT MATCH(S) FOUND IN H FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\n\NOTHING FOUND IN H FILES\n##########\n";
          fi;
          finder=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.cc" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          content=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.cc" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter3=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter3) CONTENT MATCH(S) FOUND IN CC FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\n\NOTHING FOUND IN CC FILES\n##########\n";
          fi;
          finder=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.hh" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          content=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.hh" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter1=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter1) CONTENT MATCH(S) FOUND IN HH FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\nNOTHING FOUND IN HH FILES\n##########\n";
          fi;
          finder=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.cpp" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          content=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.cpp" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter2=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter2) CONTENT MATCH(S) FOUND IN CPP FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\nNOTHING FOUND IN CPP FILES\n##########\n";
          fi;
          finder=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.hpp" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          content=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.hpp" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter3=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter3) CONTENT MATCH(S) FOUND IN HPP FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\n\tNOTHING FOUND IN HPP FILES\n##########\n";
          fi;
          finder=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.cxx" -exec grep -Hans "${{ inputs.filename }}" {} \;)
          content=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.cxx" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter1=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter1) CONTENT MATCH(S) FOUND IN CXX FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\nNOTHING FOUND IN CXX FILES\n##########\n";
          fi;
          finder=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.hxx" -exec grep -Hans "${{ inputs.filename }}" {} \;)
          content=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.hxx" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter2=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter2) CONTENT MATCH(S) FOUND IN HXX FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\nNOTHING FOUND IN HXX FILES\n##########\n";
          fi;
          finder=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.sh" -exec grep -Hans "${{ inputs.filename }}" {} \;)
          content=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.sh" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter4=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter4) CONTENT MATCH(S) FOUND IN SHELL FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\nNOTHING FOUND IN SHELL FILES\n##########\n";
          fi;
          finder1=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -iname "*.mk" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          finder2=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -iname "Makefile" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          content1=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -iname "*.mk" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          content2=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -iname "Makefile" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder1} ]]; then
            counter5=$( echo "${finder1}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter5) CONTENT MATCH(S) FOUND IN MAKE FILE(S) \n##########\n";
            echo -e "\n${finder1}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          elif [[ -n ${finder2} ]]; then
            counter6=$( echo "${finder2}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter6) CONTENT MATCH(S) FOUND IN MAKE FILES \n##########\n";
            echo -e "\n${finder2}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\nNOTHING FOUND IN MAKE FILES \n##########\n";
          fi;
          echo -e "\nScanning Completed!\nText Locator Exiting!\n\t .....\n"        
        else
          echo -e "\n##########\n ${{ inputs.filename }} NOT FOUND IN CHECKED FILES \n##########\n";
        fi;
      shell: bash
      continue-on-error: true

    - name: Check File (root mode)
      if: inputs.rootdir == 'true' && inputs.filename != ''
      run: |
        echo 
        echo -e "\n##########\nSearching from github workspace directory for ${{ inputs.filename }} matches.\n##########\n";
        export GIT_DISCOVERY_ACROSS_FILESYSTEM=1
        files=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "${{ inputs.filename }}" -print);
        file_type=$(echo ${{ inputs.filename }} | sed 's/.*\.\([^.]*\)$/\1/');
        file_count=1
        include_count=1
        makefile_count=1
        shellcheck_count=1
        if [[ ${file_type} = 'c' ]] || [[ ${file_type} = 'cc' ]] || [[ ${file_type} = 'cpp' ]] || [[ ${file_type} = 'cxx' ]] || [[ ${file_type} = 'h' ]] || [[ ${file_type} = 'hh' ]] || [[ ${file_type} = 'hpp' ]] || [[ ${file_type} = 'hxx' ]] && [[ -n ${files} ]]; then
            echo -e "\nFound File Path(s):\n${files}\n";
            for f in ${files[@]}; do
              count1=$((file_count++));
              echo -e "\n##########\n\tFILE PATH ($count1)\n##########\n";
              sudo find $(dirname ${f}) -type f -name $(basename ${f}) -print;
              if ${{ inputs.content }}; then
                echo -e "\n##########\n\tFILE CONTENT ($count1)\n##########\n";
                sudo find $(dirname ${f}) -type f -name $(basename ${f}) -exec cat -n {} \;
              fi;
                echo -e "\n##########\nCPPCHECK ERROR ANALYZER ($count1)\n##########\n";
                cppcheck --verbose --force --enable=all --suppress=missingIncludeSystem --std=c++11 --report-progress ${f}
              if ${{ inputs.include }}; then
                includes=$(sudo find $(dirname ${f}) -name $(basename ${f}) -exec sed -n 's/^#include <\(.*\)>/\1/p; s/^#include "\(.*\)"/\1/p' {} \;)      
                if [[ -n ${includes} ]]; then
                  echo -e "\nFound Include Path(s):\n${includes}\n";
                  for i in ${includes[@]}; do
                    fxpath=$(dirname ${i});
                    if [[ ! -n $fxpath ]]; then
                      fxpath='*/';
                    fi;
                    count2=$((include_count++));
                    header=$(find $(echo $(dirname ${f}) | cut -d/ -f1-8) -type f -path "*/${fxpath}*" -name "$(basename ${i})" -print -quit) 2>/dev/null;
                    if [[ -f ${header} ]]; then
                      echo -e "\n##########\nCPPCHECK HEADER FILE ($count2)\n##########\n${i}\n";
                      cppcheck --verbose --force --enable=all --std=c++11 --report-progress --suppress=missingIncludeSystem --quiet ${header}
                    else
                      echo -e "\n##########\nCPPCHECK HEADER FILE "$(basename ${i}) NOT FOUND\n##########\n";
                    fi;
                  done;
                fi;
              fi;
            done;
          echo -e "\nTotal number of ${{ inputs.filename }} file(s) checked is: $count1\n";
          echo -e "Total number of include file(s) checked is: $(expr $count2 - 1)\n";
          echo -e "Scanning Completed!\nCppcheck Exiting!\n .....\n";
        elif [[ ${file_type} = 'sh' ]] || [[ ${file_type} = 'SH' ]] && [[ -n ${files} ]]; then
          for f in ${files[@]}; do
            count3=$((shellcheck_count++));
            content=$(sudo find $(dirname ${f}) -type f -name $(basename ${f}) -exec cat -n {} \;);
            echo -e "\n##########\nSHELLCHECK ANALYZING ( $(basename ${s}) ) FOR ERROR(S) ($count3)\n##########\n";
            shellcheck --norc --severity=error ${f} && echo -e "\n##########\n\tSHELLCHECK NO ERRORS FOUND ( $(basename ${f}) )\n##########\n" || echo 'SHELLCHECK FOUND ERROR(s)';
            if ${{ inputs.content }}; then
              echo -e "\n##########\n\tFILE CONTENT\n##########\n";
              echo -e "\n${content}\n";
            fi;
          done;
          echo -e "\nTotal number of ${{ inputs.filename }} file(s) checked is: $count3\n";
          echo -e "Scanning Completed!\nShellcheck Exiting!\n .....\n";
        elif [[ ${file_type} = 'Makefile' ]] || [[ ${file_type} = 'makefile' ]] || [[ ${file_type} = 'GNUmakefile' ]] || [[ ${file_type} = 'mk' ]] && [[ -n ${files} ]]; then
          for f in ${files[@]}; do
            count4=$((makefile_count++));
            content=$(sudo find $(dirname ${f}) -type f -name $(basename ${f}) -exec cat -n {} \;);
            echo -e "\n##########\nCHECKMAKE ERROR ANALYZING $(basename ${f}) ($count4)\n##########\n";
            checkmake ${f} && echo -e "\n##########\n\tCHECKMAKE ($(basename ${f})) SCAN FOUND NO ERRORS\n##########\n" || if [ $? -eq 1 ]; then echo -e "\nScan Completed With Errors\nCheckmake exit code (1)"; fi;
            if ${{ inputs.content }}; then
              echo -e "\n##########\n\tFILE CONTENT\n##########\n";
              echo -e "\n${content}\n";
            fi;
          done;
          echo -e "\nTotal number of ${{ inputs.filename }} file(s) checked is: $count4\n";
          echo -e "Scanning Completed!\nCheckMake Exiting!\n .....\n";
        elif [[ -n ${files} ]]; then
            for f in ${files[@]}; do
              count5=$((file_count++));
              echo -e "\n##########\n\tFILE PATH ($count5)\n##########\n";
              sudo find $(dirname ${f}) -type f -name $(basename ${f}) -print;
              if ${{ inputs.content }}; then
                echo -e "\n##########\n\tFILE CONTENT ($count5)\n##########\n";
                sudo find $(dirname ${f}) -type f -name $(basename ${f}) -exec cat -n {} \;
              fi;
            done;
            echo -e "\nTotal number of ${{ inputs.filename }} file(s) checked is: $count5\n";
            echo -e "Scanning Completed!\nCheckfile Exiting!\n .....\n";
        elif [[ ${file_type} == ${{ inputs.filename }} ]]; then
          finder=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.c" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          content=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.c" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter1=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter1) CONTENT MATCH(S) FOUND IN C FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\n\tNOTHING FOUND IN C FILES\n##########\n";
          fi;
          finder=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.h" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          content=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.h" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter2=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter2) CONTENT MATCH(S) FOUND IN H FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\n\NOTHING FOUND IN H FILES\n##########\n";
          fi;
          finder=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.cc" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          content=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.cc" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter3=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter3) CONTENT MATCH(S) FOUND IN CC FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\n\NOTHING FOUND IN CC FILES\n##########\n";
          fi;
          finder=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.hh" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          content=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.hh" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter1=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter1) CONTENT MATCH(S) FOUND IN HH FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\nNOTHING FOUND IN HH FILES\n##########\n";
          fi;
          finder=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.cpp" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          content=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.cpp" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter2=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter2) CONTENT MATCH(S) FOUND IN CPP FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\nNOTHING FOUND IN CPP FILES\n##########\n";
          fi;
          finder=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.hpp" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          content=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.hpp" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter3=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter3) CONTENT MATCH(S) FOUND IN HPP FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\n\tNOTHING FOUND IN HPP FILES\n##########\n";
          fi;
          finder=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.cxx" -exec grep -Hans "${{ inputs.filename }}" {} \;)
          content=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.cxx" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter1=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter1) CONTENT MATCH(S) FOUND IN CXX FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\nNOTHING FOUND IN CXX FILES\n##########\n";
          fi;
          finder=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.hxx" -exec grep -Hans "${{ inputs.filename }}" {} \;)
          content=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.hxx" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter2=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter2) CONTENT MATCH(S) FOUND IN HXX FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\nNOTHING FOUND IN HXX FILES\n##########\n";
          fi;
          finder=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.sh" -exec grep -Hans "${{ inputs.filename }}" {} \;)
          content=$(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "*.sh" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder} ]]; then
            counter4=$( echo "${finder}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter4) CONTENT MATCH(S) FOUND IN SHELL FILE(S) \n##########\n";
            echo -e "\n${finder}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\nNOTHING FOUND IN SHELL FILES\n##########\n";
          fi;
          finder1=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -iname "*.mk" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          finder2=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -iname "Makefile" -exec grep -Hans "${{ inputs.filename }}" {} \;);
          content1=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -iname "*.mk" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          content2=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -iname "Makefile" -exec grep -q "${{ inputs.filename }}" {} \; -printf "%p\n");
          if [[ -n ${finder1} ]]; then
            counter5=$( echo "${finder1}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter5) CONTENT MATCH(S) FOUND IN MAKE FILE(S) \n##########\n";
            echo -e "\n${finder1}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          elif [[ -n ${finder2} ]]; then
            counter6=$( echo "${finder2}" | grep -c "${{ inputs.filename }}" );
            echo -e "\n##########\n ($counter6) CONTENT MATCH(S) FOUND IN MAKE FILES \n##########\n";
            echo -e "\n${finder2}\n";
            if ${{ inputs.content }}; then
              for c in ${content}; do
                echo -e "\n##########\nFILE PATH:${c}\n##########\n";
                echo -e "\n##########\n\tFILE CONTENT\n##########\n\n";
                cat -n "${i}";
              done;
            fi;
          else
            echo -e "\n##########\nNOTHING FOUND IN MAKE FILES \n##########\n";
          fi;
          echo -e "\nScanning Completed!\nText Locator Exiting!\n\t .....\n"        
        else
          echo -e "\n##########\n ${{ inputs.filename }} NOT FOUND IN CHECKED FILES \n##########\n";
        fi;
      shell: bash
      continue-on-error: true

    - name: Directory Contains
      if: inputs.filename != '' && inputs.content != false
      run: |
        echo 
        file_type=$(echo ${{ inputs.filename }} | sed 's/.*\.\([^.]*\)$/\1/');
        files=$(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "${{ inputs.filename }}" -print);
        if [[ ${file_type} == "Makefile" ]] || [[ ${file_type} == "makefile" ]] || [[ ${file_type} == "GNUmakefile" ]] ||  [[ ${file_type} != ${{ inputs.filename }} ]] && [[ -n ${files} ]]; then
          if ${{ inputs.rootdir }}; then
            echo -e "\n##########\nNOTE: Contents found in directory(s) for ${{ inputs.filename }}\n##########\n";
            ls -Shp $(dirname $(sudo find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "${{ inputs.filename }}"));
          else
            echo -e "\n##########\nNOTE: Contents found in directory(s) for ${{ inputs.filename }}\n##########\n";
            ls -Shp $(dirname $(find ${{ env.FILE_PATH }} -type f -path "*/${{ inputs.dirname }}/*" -name "${{ inputs.filename }}"));
          fi;
        fi;
      shell: bash
      continue-on-error: true

    - name: Filename Check
      if: inputs.filename == ''
      run: |
        echo 
        echo -e "\nNo input provided!\nVariable not set • filename\n\t.... Exiting\n';
      shell: bash
      continue-on-error: true
